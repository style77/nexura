import typing
from dataclasses import dataclass


@dataclass
class IOPricing:
    input_price: float
    output_price: float


# 1M tokens pricing for each model supported by OpenAI.
MODEL_PRICING_MAP: typing.Dict[str, float] = {
    "gpt-4o": IOPricing(5.00, 15.00),
    "gpt-4o-mini": IOPricing(0.150, 0.600),
    "gpt-4": IOPricing(30.00, 30.00),
    "gpt-3.5-turbo": IOPricing(3.000, 6.000),
}


class OpenAIPricingStrategy():
    """
    Pricing strategy for OpenAI models.

    OpenAI uses a token-based pricing model. This strategy calculates the price of a request based on the number of tokens generated by the model and user.
    """
    def calculate_price(self, prompt_tokens: int, completion_tokens: int, model: str):
        """
        Calculate the price of a request based on the number of tokens generated by the model and user.

        Args:
            prompt_tokens (int): The number of tokens provided by the user.
            completion_tokens (int): The number of tokens generated by the model.
            model (str): The model used to generate the tokens.

        Returns:
            float: The price of the request.
        """
        model_pricing = MODEL_PRICING_MAP.get(model)
        if model_pricing is None:
            raise ValueError(f"Model {model} is not supported by OpenAI.")

        return (model_pricing.input_price / 1000000 * prompt_tokens) + (model_pricing.output_price / 1000000 * completion_tokens)
